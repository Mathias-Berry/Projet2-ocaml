type token =
  | INT of (int)
  | STR of (string)
  | PRINT
  | PLUS
  | TIMES
  | DIV
  | MINUS
  | LET
  | IN
  | EGAL
  | IF
  | THEN
  | ELSE
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | NOT
  | NE
  | LPAREN
  | RPAREN
  | FUN
  | TO
  | REC
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* --- pr√©ambule: ici du code Caml --- *)

open Expr  

# 38 "parser.ml"
let yytransl_const = [|
  259 (* PRINT *);
  260 (* PLUS *);
  261 (* TIMES *);
  262 (* DIV *);
  263 (* MINUS *);
  264 (* LET *);
  265 (* IN *);
  266 (* EGAL *);
  267 (* IF *);
  268 (* THEN *);
  269 (* ELSE *);
  270 (* LT *);
  271 (* LE *);
  272 (* GT *);
  273 (* GE *);
  274 (* AND *);
  275 (* OR *);
  276 (* NOT *);
  277 (* NE *);
  278 (* LPAREN *);
  279 (* RPAREN *);
  280 (* FUN *);
  281 (* TO *);
  282 (* REC *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* STR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\001\000\006\000\006\000\004\000\003\000\003\000\003\000\
\003\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000\007\000\003\000\001\000\
\001\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\024\000\025\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\021\000\027\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\019\000"

let yysindex = "\004\000\
\046\255\000\000\000\000\000\000\046\255\046\255\254\254\046\255\
\046\255\046\255\004\255\000\000\041\001\000\000\085\001\001\255\
\004\255\004\255\003\255\152\255\001\255\128\255\245\254\046\255\
\046\255\046\255\046\255\046\255\046\255\046\255\046\255\046\255\
\046\255\046\255\046\255\000\000\000\000\000\000\007\255\046\255\
\046\255\000\000\046\255\107\001\074\255\074\255\107\001\001\255\
\001\255\001\255\001\255\001\255\001\255\001\255\001\255\046\255\
\178\255\201\255\085\001\063\001\046\255\046\255\046\255\085\001\
\085\001\085\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\230\000\001\000\
\250\254\000\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\225\000\201\000\213\000\237\000\041\000\
\061\000\081\000\101\000\121\000\141\000\161\000\181\000\000\000\
\000\000\000\000\242\000\000\000\000\000\000\000\000\000\249\000\
\254\000\021\001"

let yygindex = "\000\000\
\000\000\002\000\058\000\254\255"

let yytablesize = 641
let yytable = "\017\000\
\010\000\003\000\004\000\026\000\001\000\017\000\015\000\016\000\
\023\000\020\000\021\000\022\000\040\000\043\000\038\000\039\000\
\056\000\000\000\026\000\000\000\019\000\000\000\010\000\018\000\
\000\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\000\000\000\000\000\000\
\015\000\057\000\058\000\000\000\059\000\000\000\003\000\004\000\
\005\000\000\000\000\000\000\000\006\000\007\000\000\000\000\000\
\008\000\060\000\000\000\000\000\018\000\000\000\064\000\065\000\
\066\000\009\000\000\000\010\000\000\000\011\000\037\000\000\000\
\037\000\037\000\003\000\004\000\000\000\037\000\037\000\037\000\
\011\000\000\000\000\000\028\000\000\000\000\000\000\000\029\000\
\030\000\031\000\032\000\033\000\034\000\000\000\035\000\010\000\
\000\000\000\000\000\000\000\000\017\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\000\000\037\000\037\000\037\000\037\000\000\000\000\000\
\012\000\037\000\037\000\037\000\000\000\000\000\000\000\000\000\
\003\000\004\000\000\000\024\000\025\000\026\000\027\000\000\000\
\000\000\028\000\000\000\000\000\013\000\029\000\030\000\031\000\
\032\000\033\000\034\000\000\000\035\000\010\000\042\000\000\000\
\003\000\004\000\000\000\024\000\025\000\026\000\027\000\000\000\
\014\000\028\000\000\000\041\000\000\000\029\000\030\000\031\000\
\032\000\033\000\034\000\000\000\035\000\010\000\000\000\000\000\
\000\000\000\000\003\000\004\000\016\000\024\000\025\000\026\000\
\027\000\000\000\061\000\028\000\000\000\000\000\000\000\029\000\
\030\000\031\000\032\000\033\000\034\000\000\000\035\000\010\000\
\007\000\003\000\004\000\000\000\024\000\025\000\026\000\027\000\
\000\000\000\000\028\000\000\000\008\000\062\000\029\000\030\000\
\031\000\032\000\033\000\034\000\000\000\035\000\010\000\000\000\
\006\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\010\000\010\000\010\000\
\000\000\010\000\010\000\000\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\022\000\010\000\000\000\010\000\
\019\000\019\000\019\000\019\000\000\000\019\000\019\000\000\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\036\000\019\000\000\000\019\000\015\000\015\000\015\000\015\000\
\000\000\015\000\015\000\000\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\000\000\015\000\000\000\015\000\
\018\000\018\000\018\000\018\000\000\000\018\000\018\000\000\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\000\000\018\000\000\000\018\000\011\000\011\000\011\000\011\000\
\000\000\011\000\011\000\000\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\000\000\011\000\000\000\011\000\
\017\000\017\000\017\000\017\000\000\000\017\000\017\000\000\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\000\000\017\000\000\000\017\000\012\000\012\000\012\000\012\000\
\000\000\012\000\012\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\000\000\012\000\000\000\012\000\
\013\000\013\000\013\000\013\000\000\000\013\000\013\000\000\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\000\000\013\000\000\000\013\000\014\000\014\000\014\000\014\000\
\000\000\014\000\014\000\000\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\014\000\000\000\014\000\
\016\000\016\000\016\000\016\000\000\000\016\000\016\000\000\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\000\000\016\000\000\000\016\000\007\000\007\000\007\000\007\000\
\000\000\007\000\000\000\000\000\007\000\007\000\000\000\000\000\
\008\000\008\000\008\000\008\000\000\000\008\000\000\000\007\000\
\008\000\008\000\000\000\000\000\006\000\000\000\000\000\006\000\
\000\000\006\000\000\000\008\000\006\000\006\000\020\000\000\000\
\009\000\020\000\020\000\009\000\000\000\009\000\000\000\006\000\
\009\000\009\000\005\000\000\000\020\000\005\000\005\000\000\000\
\000\000\004\000\000\000\009\000\004\000\004\000\003\000\000\000\
\005\000\003\000\003\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\022\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\022\000\024\000\025\000\026\000\027\000\
\000\000\000\000\028\000\000\000\000\000\000\000\029\000\030\000\
\031\000\032\000\033\000\034\000\000\000\035\000\010\000\003\000\
\004\000\000\000\024\000\025\000\026\000\027\000\000\000\063\000\
\028\000\000\000\000\000\000\000\029\000\030\000\031\000\032\000\
\033\000\034\000\000\000\035\000\010\000\003\000\004\000\000\000\
\024\000\025\000\026\000\027\000\000\000\000\000\028\000\000\000\
\000\000\000\000\029\000\030\000\031\000\032\000\033\000\034\000\
\000\000\035\000\010\000\003\000\004\000\000\000\000\000\025\000\
\026\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\029\000\030\000\031\000\032\000\033\000\034\000\000\000\035\000\
\010\000"

let yycheck = "\002\001\
\000\000\001\001\002\001\010\001\001\000\002\001\005\000\006\000\
\011\000\008\000\009\000\010\000\010\001\025\001\017\000\018\000\
\010\001\255\255\025\001\255\255\000\000\255\255\022\001\026\001\
\255\255\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\255\255\255\255\255\255\
\000\000\040\000\041\000\255\255\043\000\255\255\001\001\002\001\
\003\001\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\011\001\056\000\255\255\255\255\000\000\255\255\061\000\062\000\
\063\000\020\001\255\255\022\001\255\255\024\001\013\000\255\255\
\015\000\016\000\001\001\002\001\255\255\020\000\021\000\022\000\
\000\000\255\255\255\255\010\001\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\255\255\255\255\255\255\255\255\000\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\255\255\057\000\058\000\059\000\060\000\255\255\255\255\
\000\000\064\000\065\000\066\000\255\255\255\255\255\255\255\255\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\255\255\255\255\000\000\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\023\001\255\255\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\255\255\
\000\000\010\001\255\255\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\255\255\
\255\255\255\255\001\001\002\001\000\000\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\000\000\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\255\255\255\255\010\001\255\255\000\000\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\255\255\
\000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\021\001\255\255\023\001\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\021\001\255\255\023\001\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\023\001\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\023\001\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\023\001\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\023\001\004\001\005\001\006\001\007\001\
\255\255\009\001\255\255\255\255\012\001\013\001\255\255\255\255\
\004\001\005\001\006\001\007\001\255\255\009\001\255\255\023\001\
\012\001\013\001\255\255\255\255\004\001\255\255\255\255\007\001\
\255\255\009\001\255\255\023\001\012\001\013\001\009\001\255\255\
\004\001\012\001\013\001\007\001\255\255\009\001\255\255\023\001\
\012\001\013\001\009\001\255\255\023\001\012\001\013\001\255\255\
\255\255\009\001\255\255\023\001\012\001\013\001\009\001\255\255\
\023\001\012\001\013\001\255\255\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\255\255\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\255\255\255\255\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\023\001\004\001\005\001\006\001\007\001\
\255\255\255\255\010\001\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\255\255\009\001\
\010\001\255\255\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\255\255\255\255\010\001\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\001\001\002\001\255\255\255\255\005\001\
\006\001\255\255\255\255\255\255\010\001\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001"

let yynames_const = "\
  PRINT\000\
  PLUS\000\
  TIMES\000\
  DIV\000\
  MINUS\000\
  LET\000\
  IN\000\
  EGAL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  AND\000\
  OR\000\
  NOT\000\
  NE\000\
  LPAREN\000\
  RPAREN\000\
  FUN\000\
  TO\000\
  REC\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  STR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 45 "parser.mly"
                              ( _1 )
# 330 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomique) in
    Obj.repr(
# 51 "parser.mly"
                                     ( _1 )
# 337 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 52 "parser.mly"
                                                  ( Ifte(_2,_4,_6) )
# 346 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'strlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 53 "parser.mly"
                                                 ( Letin(List.hd _2, List.fold_right (fun x expr -> Fonction(x, expr)) (List.tl _2) _4, _6) )
# 355 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'strlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 54 "parser.mly"
                                        ( List.fold_right (fun x expr -> Fonction(x, expr)) _2 _4 )
# 363 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 55 "parser.mly"
                                                  ( Arithop(Add,_1,_3) )
# 371 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 56 "parser.mly"
                                                  ( Arithop(Mul,_1,_3) )
# 379 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 57 "parser.mly"
                                         ( Arithop(Div,_1, _3) )
# 387 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 58 "parser.mly"
                                                  ( Arithop(Min,_1,_3) )
# 395 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 59 "parser.mly"
                                          ( Arithop(Min,Const 0, _2) )
# 402 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 60 "parser.mly"
                                                  ( Boolop1(Le,_1,_3) )
# 410 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 61 "parser.mly"
                                                 ( Boolop1(Ge,_1,_3) )
# 418 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 62 "parser.mly"
                                                  ( Boolop2(And,_1,_3) )
# 426 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 63 "parser.mly"
                                                  ( Boolop2(Or,_1,_3) )
# 434 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 64 "parser.mly"
                                                  ( Boolop1(Eg,_1,_3) )
# 442 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 65 "parser.mly"
                                                  ( Boolop1(Ne,_1,_3) )
# 450 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 66 "parser.mly"
                                                  ( Boolop1(Gt,_1,_3) )
# 458 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 67 "parser.mly"
                                                  ( Boolop1(Lt,_1,_3) )
# 466 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 68 "parser.mly"
                                                  ( Non(_2) )
# 473 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 69 "parser.mly"
                                                  ( Print(_2) )
# 480 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomique) in
    Obj.repr(
# 70 "parser.mly"
                                          ( Appli(_1, _2) )
# 488 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'strlist) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 71 "parser.mly"
                                                 ( Letrec(List.hd _3, List.fold_right (fun x expr -> Fonction(x, expr)) (List.tl _3) _5, _7) )
# 497 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 75 "parser.mly"
                                      ( _2 )
# 504 "parser.ml"
               : 'atomique))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
                            ( Const _1 )
# 511 "parser.ml"
               : 'atomique))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                            ( Variable _1 )
# 518 "parser.ml"
               : 'atomique))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parser.mly"
                            ( [_1] )
# 525 "parser.ml"
               : 'strlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'strlist) in
    Obj.repr(
# 82 "parser.mly"
                                ( _1 :: _2 )
# 533 "parser.ml"
               : 'strlist))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expr.expr)
