### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules main.ml > main.ml.depends
# Target: eval.ml.depends, tags: { extension:ml, file:eval.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules eval.ml > eval.ml.depends # cached
# Target: expr.ml.depends, tags: { extension:ml, file:expr.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules expr.ml > expr.ml.depends # cached
# Target: expr.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:expr.cmo, file:expr.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o expr.cmo expr.ml # cached
# Target: eval.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:eval.cmo, file:eval.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o eval.cmo eval.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o lexer.cmo lexer.ml # cached
# Target: resoud.ml.depends, tags: { extension:ml, file:resoud.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules resoud.ml > resoud.ml.depends # cached
# Target: type.ml.depends, tags: { extension:ml, file:type.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules type.ml > type.ml.depends # cached
# Target: type.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:type.cmo, file:type.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o type.cmo type.ml # cached
# Target: resoud.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:resoud.cmo, file:resoud.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o resoud.cmo resoud.ml # cached
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o main.cmo main.ml
# Target: expr.cmx, tags: { compile, extension:cmx, extension:ml, file:expr.cmx, file:expr.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o expr.cmx expr.ml # cached
# Target: eval.cmx, tags: { compile, extension:cmx, extension:ml, file:eval.cmx, file:eval.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o eval.cmx eval.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o parser.cmx parser.ml # cached
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o lexer.cmx lexer.ml # cached
# Target: type.cmx, tags: { compile, extension:cmx, extension:ml, file:type.cmx, file:type.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o type.cmx type.ml
# Target: resoud.cmx, tags: { compile, extension:cmx, extension:ml, file:resoud.cmx, file:resoud.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o resoud.cmx resoud.ml
+ /usr/bin/ocamlopt.opt -c -o resoud.cmx resoud.ml
File "resoud.ml", line 15, characters 55-113:
15 |     | Tuples(a) -> print_string "( "; aux (List.hd a); List.map ( fun x -> print_string " * "; aux x) (List.tl a); print_string " )"
                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 10: this expression should have type unit.
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o main.cmx main.ml
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa expr.cmx eval.cmx parser.cmx lexer.cmx type.cmx resoud.cmx main.cmx -o main.native
# Compilation successful.
